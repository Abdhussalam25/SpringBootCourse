

Collections===

====
Vector

10 buffer objects created automatically	

ArrayList
Vector
LinkedList   --- here also some practise is needed
Stack   ---  I need to go throug these things

========SET=====
implements Collection
No duplicates
Only one single null is allowed
HashSet and TreeSet
Hash set is unorordered
BEST way to perform set implementation
insert the collection inside the set
remove the duplicates
again convert to list
now there will not be any duplicates
Iterator is an Interface 
h.iterator)
i.hasnext(), i.next

Internally avoids the duplicates and not returning error
how? add method is returning boolean true only if 
the element not present inside the specific set
System.out.println(hashSet.add("null"));

		/// NOTE this case you should not use try catch here it should be handled simply by 
		// if else--- if(hashSet.add("1")) bcz add is giving boolean as return type
		//I just want to remove some fear on exception so only i used here
		why are you throwing exception 
		even the compiler is not complaining
		if we are doing the in list it could be meaning ful
		even there alse if else is more than enough.
		
	TreeSet

Following the Natural Order
sorted and ordered.

HashSet not ordered or sorted

Linked HashSet

Get 10 elements from user in list and 
show all unique elements
+++++++++NOTE++++

REMEMBER this

By using SET rememember the mathematical SET
this is same 
therefore by using two set we can do all set mathematics operations

ex. s1.addAll(s2)  // all dublicates removed again
// new set will containn only unique values
s1.retainsAll(s2) //  this is the intersection operation
if(s1.containsAll(s2) && s1.size() == s2.size()){
sysout(s2 is subset of s1)
}
+++

SET<Integer> s1 = new HashSet<>(Arrays.asList(1,3,5,7,9));

therefore insid ethe constuctor we can give coll

3) DIFFRENCE: only uncommon elements will be present
s1.removeAll(s2)

Let S5 having following elements[1,2,3,4,5,7,9], after minus/deference operation with s5 the
remaining elements with S5 are [1,3,5,7,9]
What would the elements presented in S6.
some issue in this issue
--------
LINKED HASH SET
---------------
Product
-------
pid
pName
pQty
pPU
-----
default constructor
parameterized constructor
toString
calculatePrice

Where to use?


understood that if we use the  
Interface class as reference then we canot get the specific methods present in the implemented classes

Ex go through tht TreeSet example.

TreeSet implements NavigableSet	
Navigable Set Implements SET.

descendingIterator()  this will be display in descending order

I think this method is present only in the sorted collections  ---> TreeSet , TreeMap

============MAP=============
Interface= MAP
interfaces: SortedMap extends Map,  NavigableMap extends SortedMap
AbstractMap is an abstract class
Classes: HashMap, HashTable,LinkedHashMap, TreeMap
HashMap    vs HashTable --> ThreadSafe, Null not allowed in hashtable but allowed in hashmap --unsorted and unordered
Both are unsorted and un ordered

HashMap which extends AbstractMap
TreeMap whc=ich also extends AbstractMap and implement NavigableMap
ConCurrentSkipListMap extends AbstratMap and implement NavigableMap


LinkedHashMap  Vs   TreeMap 
Insertion order      Natural Order
unsorted             sorted
Slower inserion
deletion
faster iteration

What is map?
It is another container object that stores 
elements in the form of key and value pair.
Key value pair

1)V put(K key, V value): To add new elememt
2)void putAll(Map map): To add set of map elements or from another existing map
3)void clear(): To get number of objects present currently.
4)boolean isEmplty(): It checks wheterh some object contains in container or not
5)void clear(): To remove all objects form map
6)V get(Object key): It returns value if key mathched with existing key in map
7)V boolean remove (key value)
8 )

Iterator itr = colorHMap.entrySet().iterator();
Note here iterator method we cannot find directly
we have to change to SET then it will show

HashMap important note:
1) It is not preserved insertion order
2)It is based on Hash code of key, not one  the hash code of value.
3)It also allow heterogeneous objects for both key or value
4)It can allow

Questions:
How HashMap internally working?

It is creatin 16 array of buckets
based on hashCode method it is finding the index position
Capacity?
Any container how it capable of no of hold
HashMap Capacity: It is the measure of number of 
buckets as internally by HashMap at the time of creation.
Default hashmap capacity is 16
maximum we can use is 2 power 30
LoadFactor:
When the particluar container again acquiring more memory
is called load factor 
for hashmap loadfactor is 0.7

Whether the hashmap capacity is fixed?

No we can change the capacity of hashmap.

check hashmap.class search capacity
minimum is 2 ie 2 power of 4 ==> 16
only we can change in 2 powers
==================================
LinkedHashMap=====================
==================================
LinkedHashMap extending HashMap therefore all 
features of HashMap is available here with some extra.
1) HashMap follow data structure of HashTable where as LinkedHashMap follow Hybrid data structure
( LinkedList)
2) Insertion order is not preserved in the HashMap 
because it is based on HashCode of key..

========================================
Exercise: Stores key as shortname and completename

sk=sanjay kumar
jk 

add
search

how search acc to letter



========Comparable interface
	In this interface,method called cmpareTo can be used  to compare the same type of objects
	It is used to provide natural sorting order of objects
	It was introduces in java 1.0
	

public interface Comparable<E>{
public int compareTo(Object object);

}
Note: It is used to compare the current object with specified object.

if it returns positive, when current(this) object is greater than specified object
if it returns negative, when current(this) object is smaller than specified object
if it returns zero, when current(this) object is equal to the specified object

Product as user defined class implements Comparable interface
-----
pId
pName
pPU
pQty
pTotalPrice
---------
Constructor
getter/setter
compareTo(Product product)

toString

Plan -- design---start coding---testing --- enhancing















